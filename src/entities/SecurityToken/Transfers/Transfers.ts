import { SubModule } from '../SubModule';
import { Restrictions } from './Restrictions';
import { SecurityToken } from '../SecurityToken';
import { Context } from '../../../Context';
import { SignTransferData } from '../../../procedures';
import { ShareholderDataEntry, Omit } from '../../../types';

export class Transfers extends SubModule {
  public restrictions: Restrictions;

  constructor(securityToken: SecurityToken, context: Context) {
    super(securityToken, context);

    this.restrictions = new Restrictions(securityToken, context);
  }

  /**
   * Generate a signature string based on dynamic KYC data. This data can be used to:
   * - Check if a transfer can be made (using `canTransfer`) with different KYC data than is currently present
   * - Actually make a transfer (using `transfer`) with different KYC data than is currently present (in this case, the existing KYC data will be overwritten)
   *
   * The signature can be generated by a third party other than the issuer. The signing wallet should have permission to modify KYC data (via the Shareholders Administrator role).
   * Otherwise, the new data will be disregarded
   *
   * Note that, when supplying KYC data for signing, ALL investor entries should be supplied (even those that remain the same)
   *
   * @param kycData new KYC data array to sign
   * @param kycData[].address shareholder wallet address
   * @param kycData[].canSendAfter date after which the shareholder can transfer tokens (sell lockup)
   * @param kycData[].canReceiveAfter date after which the shareholder can receive tokens (buy lockup)
   * @param kycData[].kycExpiry date at which the shareholder's KYC expires
   * @param validFrom date from which this signature is valid
   * @param validTo date until which this signature is valid
   */
  public signTransferData = async (args: {
    kycData: Omit<Omit<ShareholderDataEntry, 'canBuyFromSto'>, 'isAccredited'>[];
    validFrom: Date;
    validTo: Date;
  }) => {
    const { context, securityToken } = this;
    const { symbol } = securityToken;
    const procedure = new SignTransferData(
      {
        symbol,
        ...args,
      },
      context
    );
    return procedure.prepare();
  };
}
